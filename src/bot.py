import os
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import TelegramError
from dotenv import load_dotenv
import requests
import asyncio
import logging

load_dotenv()
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self, api_url: str):
        self.token = os.getenv('TELEGRAM_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        self.topic_id = int(os.getenv('TELEGRAM_TOPIC_ID', 0))
        self.api_url = api_url
        self.application = None
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
        logger.info(f"TELEGRAM_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'–î–∞' if self.token else '–ù–µ—Ç'}")
        logger.info(f"TELEGRAM_CHAT_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'–î–∞' if self.chat_id else '–ù–µ—Ç'}")
        logger.info(f"TELEGRAM_TOPIC_ID: {self.topic_id}")
        logger.info(f"API_URL: {self.api_url}")
        
        if not all([self.token, self.chat_id]):
            logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID")
            return
            
        try:
            self.application = Application.builder().token(self.token).build()
            self._setup_handlers()
            logger.info(f"–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å chat_id={self.chat_id} –∏ topic_id={self.topic_id}")
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("price", self._handle_price_command))
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    async def _handle_price_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /price –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ–º–µ: {update.effective_message.is_topic_message}")
        if update.effective_message.is_topic_message:
            logger.info(f"ID —Ç–µ–º—ã: {update.effective_message.message_thread_id}")
        
        try:
            response = requests.get(f"{self.api_url}/current_price")
            logger.info(f"–û—Ç–≤–µ—Ç API: —Å—Ç–∞—Ç—É—Å={response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                message = (
                    f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ PLEX</b>\n"
                    f"‚î£ –¶–µ–Ω–∞: {data['price']:,.2f} {data['currency']}\n"
                    f"‚î£ –õ–æ–∫–∞—Ü–∏—è: {data['location']}\n"
                    f"‚îó –û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['timestamp']}"
                )
            else:
                message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É"
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É: {response.text}")
            
            await self._reply_to(update, message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /price: {e}", exc_info=True)
            await self._reply_to(update, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def _reply_to(self, update: Update, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            params = {
                'chat_id': update.effective_chat.id,
                'text': text,
                'parse_mode': 'HTML'
            }
            
            if update.effective_message.is_topic_message:
                thread_id = update.effective_message.message_thread_id
                params['message_thread_id'] = thread_id
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É {thread_id}")
            
            await self.application.bot.send_message(**params)
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)

    def is_connected(self):
        return self.application is not None

    async def send_message(self, text: str):
        if not self.is_connected():
            return False
            
        try:
            params = {
                'chat_id': self.chat_id,
                'text': text,
                'parse_mode': 'HTML'
            }
            
            if self.topic_id:
                params['message_thread_id'] = self.topic_id
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É {self.topic_id}")
                
            await self.application.bot.send_message(**params)
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}", exc_info=True)
            return False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.application:
            return
            
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.send_message("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ PLEX –∑–∞–ø—É—â–µ–Ω!\n"
                                  "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /price –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.application:
            try:
                await self.application.stop()
                await self.application.shutdown()
                logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)