import aiohttp
import asyncio
from datetime import datetime
from bot import TelegramBot
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class PLEXMonitor:
  def __init__(self, telegram_bot: TelegramBot):
    self.interval = 900
    self.active = True
    self.last_price = None
    self.bot = telegram_bot
    self.session = None
    logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PLEXMonitor —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {self.interval} —Å–µ–∫—É–Ω–¥")

  async def get_plex_order(self):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É PLEX –≤ Jita"""
    logger.info("–ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω—ã PLEX")
    if not self.session:
      logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ aiohttp")
      self.session = aiohttp.ClientSession()
      
    url = "https://esi.evetech.net/latest/markets/10000002/orders/"
    params = {
      'type_id': 44992,
      'order_type': 'sell',
      'region_id': 10000002
    }
    
    try:
      logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ EVE API: {url}")
      async with self.session.get(url, params=params, timeout=10) as response:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API. –°—Ç–∞—Ç—É—Å: {response.status}")
        response.raise_for_status()
        orders = await response.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(orders)} –æ—Ä–¥–µ—Ä–æ–≤")
        if orders:
          min_order = min(orders, key=lambda x: x['price'])
          logger.info(f"–ù–∞–π–¥–µ–Ω –æ—Ä–¥–µ—Ä —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π: {min_order['price']}")
          
          location_id = min_order['location_id']
          location_url = f"https://esi.evetech.net/latest/universe/stations/{location_id}/"
          try:
            async with self.session.get(location_url, timeout=10) as location_response:
              location_response.raise_for_status()
              location_data = await location_response.json()
              min_order['location_name'] = location_data['name']
          except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏: {e}")
            min_order['location_name'] = f"Unknown Location ({location_id})"
          
          return min_order
        else:
          logger.warning("–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞")
          return None
    except aiohttp.ClientError as e:
      error_msg = f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã PLEX: {e}"
      logger.error(error_msg, exc_info=True)
      await self.bot.send_message(f"‚ö†Ô∏è {error_msg}")
      return None
    except Exception as e:
      error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã PLEX: {e}"
      logger.error(error_msg, exc_info=True)
      await self.bot.send_message(f"‚ö†Ô∏è {error_msg}")
      return None

  async def run_monitoring(self):
    """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    while self.active:
      logger.info("–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
      order = await self.get_plex_order()
      timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
      
      if order is not None:
        self.last_price = order['price']
        message = (
          f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ PLEX</b>\n"
          f"‚î£ –¶–µ–Ω–∞: {order['price']:,.2f} ISK\n"
          f"‚î£ –õ–æ–∫–∞—Ü–∏—è: {order['location_name']}\n"
          f"‚îó –û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}"
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {message}")
        await self.bot.send_message(message)
      else:
        error_msg = f"[{timestamp}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É PLEX"
        logger.warning(error_msg)
        
      logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {self.interval} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞")
      await asyncio.sleep(self.interval)
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if self.session:
      logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ aiohttp")
      await self.session.close()

  async def set_interval(self, seconds: int):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    if seconds < 300:  # –ú–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç
      error_msg = "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 5 –º–∏–Ω—É—Ç"
      logger.warning(error_msg)
      raise ValueError(error_msg)
    self.interval = seconds
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {seconds} —Å–µ–∫—É–Ω–¥")
    await self.bot.send_message(f"üõ† –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {seconds} —Å–µ–∫—É–Ω–¥")